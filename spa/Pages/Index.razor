@page "/"
@using spa.Services
@using spa.Models.Github
@inject IMarkdownClient markdownClient
@inject PostsRepo postsRepo
@inject NavigationManager navigation

<div class="row m-0 px-4">
    <div class="col-sm-12 col-md-10 col-lg-8 mx-auto mt-0 mt-sm-1">
            @foreach (var post in posts)
            {
                <a href="/posts/@post.FolderName" class="row my-1 text-decoration-none text-dark post-link py-0">
                @if(!string.IsNullOrWhiteSpace(post.HeaderImageUrl))
                {
                    <div class="col-12">
                        <img class="post-link-image" src="@post.HeaderImageUrl"/>
                    </div>
                }
                
                <div class="col-12">
                    @(new MarkupString(post.Title))
                    @(new MarkupString(post.Description))
                    <div class="d-flex pt-2">
                        <div class="mr-auto">
                            @(new MarkupString(post.Tags))
                        </div>
                        <strong>
                            @{
                                var hasDatetime = DateTime.TryParse(post.FolderName, out var result);
                                if(hasDatetime)
                                {
                                    @result.ToString("MMM d, yyy")
                                }
                            }
                        </strong>
                    </div>
                </div>
            </a>
            }
    </div>
</div>

@code
{ 
    List<GitContent> contents = new List<GitContent>();
    List<spa.Models.Post> posts = new List<spa.Models.Post>();
    string markdown = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        posts = await postsRepo.GetPostsAsync();

        for(int i = 0; i < posts.Count; i++)
        {
            posts[i].Title = await markdownClient.ParseMarkdownFromUrl(posts[i].TitleUrl);
            posts[i].Description = await markdownClient.ParseMarkdownFromUrl(posts[i].DescriptionUrl);
            posts[i].Tags = await markdownClient.ParseMarkdownFromUrl(posts[i].TagsUrl);
        }

    } 
    void NavigateToPost(spa.Models.Post post)
    {
        navigation.NavigateTo($"/post/{post.FolderName}", true);
    }
}